from chain_forwards_backwards_logsumexp import forwards_algo_log_alpha
from chain_forwards_backwards_logsumexp import forwards_backwards_algo_log_gamma
from chain_forwards_backwards_logsumexp import forwards_algo_log_Z


if __name__ == "__main__":
    n_labels = 5
    T = 10
    log_edge_pot = np.linspace(0,1,n_labels**2).reshape((n_labels, n_labels))
    log_node_pot = np.linspace(0,1,T*n_labels).reshape((T,n_labels))
    log_alpha = forwards_algo_log_alpha(log_edge_pot, log_node_pot, T, n_labels)
    numpy.testing.assert_allclose(np.exp(log_alpha), np.asarray([[0.19192114498591317, 0.19587814324248543, 0.1999167262311812, 0.20403857605244238, 0.20824540948797787], [0.17597072294171517, 0.18724023363428538, 0.19923146592421478, 0.2119906402800139, 0.2255669372197709], [0.17597072294171512, 0.18724023363428535, 0.19923146592421476, 0.21199064028001394, 0.2255669372197708], [0.17597072294171512, 0.18724023363428532, 0.1992314659242147, 0.21199064028001388, 0.2255669372197708], [0.17597072294171512, 0.1872402336342853, 0.19923146592421478, 0.21199064028001394, 0.22556693721977084], [0.17597072294171515, 0.18724023363428532, 0.19923146592421473, 0.2119906402800139, 0.22556693721977078], [0.17597072294171517, 0.18724023363428535, 0.19923146592421478, 0.21199064028001394, 0.22556693721977086], [0.17597072294171517, 0.18724023363428535, 0.19923146592421478, 0.21199064028001394, 0.22556693721977086], [0.17597072294171517, 0.18724023363428535, 0.19923146592421478, 0.211990640280014, 0.22556693721977084], [0.17597072294171515, 0.18724023363428535, 0.19923146592421478, 0.21199064028001396, 0.22556693721977084]]))
    log_gamma  = forwards_backwards_algo_log_gamma(log_edge_pot, log_node_pot, T, n_labels)
    numpy.testing.assert_allclose(np.exp(log_gamma), np.asarray([[0.12019228330470735, 0.15108374985191603, 0.18991485011935327, 0.2387262053742242, 0.30008291134979903], [0.10836512880009895, 0.14201241885202187, 0.18610716686735188, 0.24389330059565587, 0.3196219848848714], [0.10836512880009894, 0.14201241885202187, 0.18610716686735188, 0.24389330059565598, 0.3196219848848713], [0.10836512880009896, 0.14201241885202187, 0.18610716686735185, 0.24389330059565598, 0.3196219848848714], [0.10836512880009894, 0.14201241885202184, 0.1861071668673519, 0.24389330059565592, 0.3196219848848713], [0.10836512880009896, 0.14201241885202193, 0.18610716686735193, 0.2438933005956559, 0.3196219848848713], [0.10836512880009895, 0.14201241885202184, 0.18610716686735188, 0.2438933005956559, 0.31962198488487137], [0.10836512880009895, 0.14201241885202187, 0.1861071668673519, 0.2438933005956559, 0.3196219848848714], [0.10836512880009895, 0.14201241885202187, 0.1861071668673519, 0.24389330059565592, 0.3196219848848713], [0.17597072294171515, 0.18724023363428535, 0.19923146592421478, 0.21199064028001396, 0.22556693721977084]]))
    numpy.testing.assert_allclose(np.exp(log_gamma).sum(axis=1), np.ones((T,)))
    
    log_alpha = np.empty((T, n_labels))
    log_kappa = np.empty((T))    
    temp_array_1 = np.empty((n_labels))
    temp_array_2 = np.empty((n_labels))    
    log_Z = forwards_algo_log_Z(log_edge_pot, log_node_pot, T, n_labels, log_alpha, log_kappa, temp_array_1, temp_array_2)
    numpy.testing.assert_almost_equal(log_Z, 26.2259282913)

''' Matlab test code
n_labels = 5
T = 10
log_edge_pot = reshape(linspace(0,1,n_labels^2), [n_labels, n_labels])'
log_node_pot = reshape(linspace(0,1,T*n_labels), [ n_labels, T])'
edgeStruct.useMex=0

edgeStruct = 

    useMex: 0

edgeStruct.edgeEnds = int32([1:T-1 ; 2:T])';
edgeStruct.nStates = int32(repmat(n_labels, 1, T));
UGM_ChainFwd(exp(log_node_pot), repmat(exp(log_edge_pot), [1 1 T]), repmat(n_labels, 1,T), 0)
[gamma edgeBel logZ] = UGM_Infer_Chain(exp(log_node_pot), repmat(exp(log_edge_pot), [1 1 T]), edgeStruct)
    '''